{
	"ignition": {
		"config": {},
		"security": {
			"tls": {}
		},
		"timeouts": {},
		"version": "2.3.0"
	},
	"networkd": {},
	"passwd": {},
	"storage": {
		"directories": [
			{
				"filesystem": "root",
				"group": {
					"name": "root"
				},
				"path": "/storage",
				"user": {
					"name": "root"
				},
				"mode": 493
			},
			{
				"filesystem": "root",
				"group": {
					"name": "root"
				},
				"path": "/etc/sysctl.d",
				"user": {
					"name": "root"
				},
				"mode": 493
			},
			{
				"filesystem": "root",
				"group": {
					"name": "root"
				},
				"path": "/etc/motd.d",
				"user": {
					"name": "root"
				},
				"mode": 493
			}
		],
		"files": [
			{
				"filesystem": "root",
				"group": {
					"name": "root"
				},
				"path": "/etc/coreos/update.conf",
				"user": {
					"name": "root"
				},
				"contents": {
					"source": "https://raw.githubusercontent.com/blockstackpbc/gaia-docker/master/ignition-files/etc/coreos/update.conf",
					"verification": {
						"hash": "sha512-14884911c8101089d23535fcb08f6f77da46b0687581ff1f49e90943d1ac7366cd55050d0df809022c3acae41e8c666ae75cf8ac03989de56a89f3af10ce3ce0"
					}
				},
				"mode": 420
			},
			{
				"filesystem": "root",
				"group": {
					"name": "root"
				},
				"path": "/etc/docker/docker.json",
				"user": {
					"name": "root"
				},
				"contents": {
					"source": "https://raw.githubusercontent.com/blockstackpbc/gaia-docker/master/ignition-files/etc/docker/docker.json",
					"verification": {
						"hash": "sha512-1400605e29faaf0531c0b9ffeda072b65a98fbd53839d667737dc1780fcc4db80ed780d00bf7f007f166981916319c1fbf75cd163ffbaefd51bc9ece662fe708"
					}
				},
				"mode": 420
			},
			{
				"filesystem": "root",
				"group": {
					"name": "root"
				},
				"path": "/etc/vim/vimrc.local",
				"user": {
					"name": "root"
				},
				"contents": {
					"source": "https://raw.githubusercontent.com/blockstackpbc/gaia-docker/master/ignition-files/etc/vim/vimrc.local",
					"verification": {
						"hash": "sha512-22696cbba09f2a2a986f941b2c20037208030a92f3430e372b4c9e4a8276c3f2b8ac8279ef8ad6a7a3fd217660194a896a48c8c76118f3c6c9e13e0190ad5d8b"
					}
				},
				"mode": 420
			},
			{
				"filesystem": "root",
				"group": {
					"name": "root"
				},
				"path": "/etc/motd.d/default.conf",
				"user": {
					"name": "root"
				},
				"contents": {
					"source": "https://raw.githubusercontent.com/blockstackpbc/gaia-docker/master/ignition-files/etc/motd.d/default.conf",
					"verification": {
						"hash": "sha512-d1b8bcc12471d2aa312b63df1c4f8fa6c9e88d338401e6b1a808bb344cbfb0ebbaf4513ecce4df06ca644f5fdd34ce0aabe70e33e668cb249753361a5e5bd3b0"
					}
				},
				"mode": 420
			},
			{
				"filesystem": "root",
				"group": {
					"name": "root"
				},
				"path": "/etc/modules-load.d/nf.conf",
				"user": {
					"name": "root"
				},
				"contents": {
					"source": "https://raw.githubusercontent.com/blockstackpbc/gaia-docker/master/ignition-files/etc/modules-load.d/nf.conf",
					"verification": {
						"hash": "sha512-ec7e60d8bd06520bb9ccdd933cb67c88eb010b1f6a1ffa7565398816fc406f917680af6e1908016b3031435c007c22cc25a33755e6074d02d4758e7deb093a8f"
					}
				},
				"mode": 420
			},
			{
				"filesystem": "root",
				"group": {
					"name": "root"
				},
				"path": "/etc/sysctl.d/startup.conf",
				"user": {
					"name": "root"
				},
				"contents": {
					"source": "https://raw.githubusercontent.com/blockstackpbc/gaia-docker/master/ignition-files/etc/sysctl.d/startup.conf",
					"verification": {
						"hash": "sha512-8941719a8564ae28435a531faff5b77511cbdaeb7fcbc66179240ce6625df389ad671d9bc3bed3d7f3dc3fce08b80fc2657db45e205a8dd5028aa458ad6c07bc"
					}
				},
				"mode": 420
			}
		]
	},
	"systemd": {
		"units": [
			{
				"dropins": [
					{
						"contents": "[Service]\nTTYVTDisallocate=no\n",
						"name": "no-disallocate.conf"
					}
				],
				"name": "getty@.service"
			},
			{
				"enabled": true,
				"name": "docker-tcp.socket",
				"contents": "# docker-tcp.socket\n[Unit]\nDescription=Docker Socket for the API\n\n[Socket]\nListenStream=2375\nService=docker.service\nBindIPv6Only=both\n\n[Install]\nWantedBy=sockets.target\n"
			},
			{
				"enabled": false,
				"name": "certbot.service",
        "contents": "# certbot.service\n[Unit]\nDescription=LetsEncrypt Certbot Service\nRequires=gaia.service\nRequires=letsencrypt.service\nAfter=gaia.service\nAfter=letsencrypt.service\n\n[Service]\nType=oneshot\nRemainAfterExit=no\nEnvironmentFile=/gaia/gaia.env\nEnvironmentFile=/etc/environment\nExecStartPre=-/usr/bin/docker pull ${CERTBOT_IMAGE}ExecStart=/usr/bin/docker run \\\n  --rm \\\n  --net=gaia \\\n  -m 64m \\\n  --oom-kill-disable \\\n  -v ${LOCAL_CERTBOT_CONF}:${REMOTE_CERTBOT_CONF} \\\n  -v ${LOCAL_CERTBOT_WWW}:${REMOTE_CERTBOT_WWW} \\\n  --name certbot \\\n  ${CERTBOT_IMAGE} \\\nrenew\nExecStart=/usr/bin/docker exec nginx sh -c \"nginx -s reload\"\n\nExecStop=-/usr/bin/docker stop certbot\nExecReload=-/usr/bin/docker restart certbot\n\n[Install]\nWantedBy=multi-user.target\n"
			},
			{
				"enabled": true,
				"name": "certbot.timer",
        "contents": "# certbot.timer\n[Unit]\nDescription=Certbot Renewal Timer\n\n[Timer]\nOnCalendar=*-*-* 00:00:00\nOnCalendar=*-*-* 12:00:00\n\n[Install]\nWantedBy=timers.target\n"
			},
			{
				"enabled": false,
				"name": "check-dns.service",
        "contents": "# check-dns.service\n[Unit]\nDescription=Check DNS Record Service\nAfter=letsencrypt-init.service\nConditionPathExists=/tmp/letsencrypt.init\nConditionPathExists=!/tmp/dns_checked\nConditionFileIsExecutable=/gaia/scripts/check-dns.sh\n\n[Service]\nType=oneshot\nRemainAfterExit=no\nEnvironmentFile=/etc/environment\nExecStart=/bin/bash /gaia/scripts/check-dns.sh\n\n[Install]\nWantedBy=multi-user.target\n"
			},
			{
				"enabled": true,
				"name": "check-dns.timer",
        "contents": "# check_dns.timer\n[Unit]\nDescription=Check DNS Record timer\n\n[Timer]\nOnActiveSec=60\nOnUnitActiveSec=60\n\n[Install]\nWantedBy=timers.target\n"
			},
			{
				"enabled": true,
				"name": "clone-repo.service",
        "contents": "# clone-repo.service\n[Unit]\nDescription=Clone Gaia Repo\nBefore=gaia.service\nBefore=nginx.service\nBefore=certbot.service\n\n[Service]\nType=simple\nRemainAfterExit=yes\nExecStart=/bin/sh -c \"if [ -d /gaia ]; then /usr/bin/git -C /gaia pull; else /usr/bin/git clone -b master --single-branch https://github.com/blockstackpbc/gaia-docker /gaia; fi\"\nExecStart=/bin/cp -R /gaia/unit-files/* /etc/system/systemd\nExecStart=/usr/bin/systemctl daemon-reload\n[Install]\nWantedBy=multi-user.target\n"
			},
			{
				"enabled": true,
				"name": "create-docker-network.service",
        "contents": "# create_docker_network.service\n[Unit]\nDescription=Gaia Docker Network\nConditionFileIsExecutable=/gaia/scripts/create-docker-network.sh\nRequires=docker.service\nRequires=clone-repo.service\nBefore=gaia.service\nBefore=nginx.service\nBefore=certbot.service\n\n[Service]\nTimeoutStartSec=0\nType=oneshot\nRemainAfterExit=yes\n\nExecStart=/bin/sh /gaia/scripts/create-docker-network.sh\n\n[Install]\nWantedBy=multi-user.target\n"
			},
			{
				"enabled": true,
				"name": "gaia-admin.service",
        "contents": "# gaia-admin.service\n[Unit]\nDescription=Gaia Admin Service\nPartOf=gaia.service\nAfter=gaia.service\n\n[Service]\nWorkingDirectory=/gaia\nEnvironmentFile=/gaia/gaia.env\nTimeoutStartSec=0\n#Restart=always\nRestart=on-failure\nRemainAfterExit=yes\nRestartSec=5\nExecStartPre=/bin/bash /gaia/scripts/update-configs.sh\nExecStartPre=-/usr/bin/docker pull ${ADMIN_IMAGE}\nExecStart=/usr/bin/docker run \\\n  --rm \\\n  --net=gaia \\\n  -m 128m \\\n  --oom-kill-disable \\\n  -p 8009:3000 \\\n  -v /gaia/admin-config:/src/admin/etc \\\n  -v /gaia/hub-config:/tmp/hub-config \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e CONFIG_PATH=\"/src/admin/etc/config.json\" \\\n  --name gaia-admin \\\n  ${ADMIN_IMAGE} \\\nnode lib/index.js\n\nExecStop=-/usr/bin/docker stop gaia-admin\nExecReload=-/usr/bin/docker restart gaia-admin\n\n[Install]\nWantedBy=gaia.service\n"
			},
			{
				"enabled": true,
				"name": "gaia-hub.service",
        "contents": "# gaia-hub.service\n[Unit]\nDescription=Gaia Hub Service\nPartOf=gaia.service\nAfter=gaia.service\n\n[Service]\nWorkingDirectory=/gaia\nEnvironmentFile=/gaia/gaia.env\nTimeoutStartSec=0\n#Restart=always\nRestart=on-failure\nRemainAfterExit=yes\nRestartSec=5\nExecStartPre=/bin/bash /gaia/scripts/update-configs.sh\nExecStartPre=-/usr/bin/docker pull ${HUB_IMAGE}\nExecStart=/usr/bin/docker run \\\n  --rm \\\n  --net=gaia \\\n  -m 128m \\\n  --oom-kill-disable \\\n  -p 3000:3000 \\\n  -v /gaia/hub-config:/src/hub/etc \\\n  -v ${LOCAL_DISK}:${GAIA_DISK_STORAGE_ROOT_DIR} \\\n  -e CONFIG_PATH=\"/src/hub/etc/config.json\" \\\n  -e GAIA_DISK_STORAGE_ROOT_DIR=\"${GAIA_DISK_STORAGE_ROOT_DIR}\" \\\n  --name gaia-hub \\\n  ${HUB_IMAGE} \\\nnode lib/index.js\n\nExecStop=-/usr/bin/docker stop gaia-hub\nExecReload=-/usr/bin/docker restart gaia-hub\n\n[Install]\nWantedBy=gaia.service\n"
			},
			{
				"enabled": true,
				"name": "gaia-reader.service",
        "contents": "# gaia-reader.service\n[Unit]\nDescription=Gaia Reader Service\nPartOf=gaia.service\nAfter=gaia.service\n\n[Service]\nWorkingDirectory=/gaia\nEnvironmentFile=/gaia/gaia.env\nTimeoutStartSec=0\n#Restart=always\nRestart=on-failure\nRemainAfterExit=yes\nRestartSec=5\nExecStartPre=/bin/bash /gaia/scripts/update-configs.sh\nExecStartPre=-/usr/bin/docker pull ${READER_IMAGE}\nExecStart=/usr/bin/docker run \\\n  --rm \\\n  --net=gaia \\\n  -m 128m \\\n  --oom-kill-disable \\\n  -p 8008:3000 \\\n  -v /gaia/reader-config:/src/reader/etc:ro \\\n  -v ${LOCAL_DISK}:${GAIA_DISK_STORAGE_ROOT_DIR} \\\n  -e CONFIG_PATH=\"/src/reader/etc/config.json\" \\\n  -e GAIA_DISK_STORAGE_ROOT_DIR=\"${GAIA_DISK_STORAGE_ROOT_DIR}\" \\\n  --name gaia-reader \\\n  ${READER_IMAGE} \\\nnode lib/index.js\n\nExecStop=-/usr/bin/docker stop gaia-reader\nExecReload=-/usr/bin/docker restart gaia-reader\n\n[Install]\nWantedBy=gaia.service\n"
			},
			{
				"enabled": true,
				"name": "gaia.service",
        "contents": "# gaia.service\n[Unit]\nDescription=Gaia\nRequires=docker.service\nRequires=create-docker-network.service\nRequires=clone-repo.service\nRequires=letsencrypt-init.service\nRequires=check-dns.service\nAfter=docker.service\nAfter=create-docker-network.service\nAfter=clone-repo.service\nAfter=letsencrypt-init.service\nAfter=check-dns.service\nConditionPathExists=/tmp/letsencrypt.init\nConditionPathExists=/tmp/dns_checked\n\n[Service]\nType=oneshot\nExecStart=/bin/true\nRemainAfterExit=yes\n\n[Install]\nWantedBy=multi-user.target\n"
			},
			{
				"enabled": false,
				"name": "letsencrypt-init.service",
        "contents": "# letsencrypt_init.service\n[Unit]\nDescription=LetsEncrypt Init Service\nConditionPathExists=!/tmp/letsencrypt.init\nConditionFileIsExecutable=/gaia/scripts/letsencrypt-init.sh\n\n[Service]\nType=oneshot\nRemainAfterExit=no\nEnvironmentFile=/etc/environment\nExecStart=/bin/bash -x /gaia/scripts/letsencrypt-init.sh\n\n[Install]\nWantedBy=multi-user.target\n"
			},
			{
				"enabled": true,
				"name": "letsencrypt-init.timer",
        "contents": "# letsencrypt_init.timer\n[Unit]\n\nDescription=LetsEncrypt Init Timer\n\n[Timer]\nOnActiveSec=60\nOnUnitActiveSec=60\n\n[Install]\nWantedBy=timers.target\n"
			},
			{
				"enabled": true,
				"name": "letsencrypt.service",
        "contents": "# letsencrypt.service\n[Unit]\nDescription=Install LetsEncrypt Certs\nConditionPathExists=/tmp/letsencrypt.init\nConditionPathExists=/tmp/dns_checked\nConditionPathExists=!/tmp/ssl_created\nConditionFileIsExecutable=/gaia/scripts/letsencrypt.sh\nRequires=check-dns.service\nRequires=letsencrypt-init.service\nRequires=nginx.service\nAfter=check-dns.service\nAfter=letsencrypt-init.service\nAfter=nginx.service\n\n[Service]\nType=oneshot\nWorkingDirectory=/gaia\nEnvironmentFile=/etc/environment\nEnvironmentFile=/gaia/gaia.env\n\nRemainAfterExit=yes\nExecStart=/bin/bash /gaia/scripts/letsencrypt.sh\n\n[Install]\nWantedBy=multi-user.target\n"
			},
			{
				"enabled": true,
				"name": "nginx.service",
        "contents": "# nginx.service\n[Unit]\nDescription=Nginx SSL Service\nRequires=gaia.service\nPartOf=gaia.service\nAfter=gaia.service\nAfter=gaia-hub.service\nAfter=gaia-reader.service\nAfter=gaia-admin.service\nConditionPathExists=/tmp/letsencrypt.init\n\n[Service]\nWorkingDirectory=/gaia\nEnvironmentFile=/gaia/gaia.env\nEnvironmentFile=/etc/environment\nTimeoutStartSec=0\n#Restart=always\nRestart=on-failure\nRemainAfterExit=yes\nRestartSec=5\nExecStartPre=sh /gaia/scripts/update-configs.sh\nExecStartPre=-/usr/bin/docker stop nginx\nExecStartPre=-/usr/bin/docker pull ${NGINX_IMAGE}\nExecStart=/usr/bin/docker run \\\n  --rm \\\n  --net=gaia \\\n  -m 128m \\\n  -p 80:80 \\\n  -p 443:443 \\\n  --expose=80 \\\n  --expose=443 \\\n  --oom-kill-disable \\\n  -v /gaia/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf \\\n  -v /gaia/nginx/conf.d/nginx.conf:/etc/nginx/nginx.conf \\\n  -v /gaia/nginx/html/index.html:/usr/share/nginx/html/index.html \\\n  -v ${LOCAL_CERTBOT_CONF}:${REMOTE_CERTBOT_CONF} \\\n  -v ${LOCAL_CERTBOT_WWW}:${REMOTE_CERTBOT_WWW} \\\n  --name nginx \\\n  ${NGINX_IMAGE}\n\nExecStop=-/usr/bin/docker stop nginx\nExecReload=-/usr/bin/docker restart nginx\n\n[Install]\nWantedBy=gaia.service\n"
			},
			{
				"enabled": false,
				"name": "reset-ssl-certs.service",
        "contents": "# reset-ssl-certs.service\n[Unit]\nDescription=Reset Gaia to first boot\nConditionFileIsExecutable=/gaia/scripts/reset-certs.sh\n\n[Service]\nType=oneshot\nRemainAfterExit=no\nEnvironmentFile=/gaia/gaia.env\nEnvironmentFile=/etc/environment\nExecStart=/bin/bash /gaia/scripts/reset-certs.sh\n\n[Install]\nWantedBy=multi-user.target\n"
			},
			{
				"enabled": false,
				"name": "storage.mount",
        "contents": "# storage.mount\n[Unit]\nDescription=Mount Local Disk to /storage\n\n[Mount]\nWhat=/dev/xvdf\nWhere=/storage\nType=xfs\n[Install]\nWantedBy=local-fs.target\n"
			}
		]
	}
}
